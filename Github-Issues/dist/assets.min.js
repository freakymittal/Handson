"use strict";var app=angular.module("app",["angularMoment","ngRoute"]);app.config(["$routeProvider","$locationProvider",function(e,s){e.when("/",{templateUrl:"assets/IssuesView.html",controller:"IssuesCtrl",resolve:{}}).when("/postIssue",{templateUrl:"assets/postIssue.html",controller:"PostIssueCtrl",resolve:{}})}]),app.filter("timechange",function(){return function(e){return"No Due Date"===e?e:"Closed on "+new Date(e).toDateString().split(" ").slice(1).join(" ")}}),app.directive("modal",["ModalService",function(e){return{link:function(s,t,n){function o(){t.hide(),$("body").removeClass("modal-open")}if(n.id){t.appendTo("body"),t.on("click",function(e){$(e.target).closest(".modal-body").length||s.$evalAsync(o)});var i={id:n.id,open:function(){t.show(),$("body").addClass("modal-open")},close:o};e.Add(i),s.$on("$destroy",function(){e.Remove(n.id),t.remove()})}else console.error("modal must have an id")}}}]),app.factory("ModalService",function(){var e=[];return{Add:function(s){e.push(s)},Remove:function(s){var t=e.filter(function(e){return e.id===s})[0];e=e.filter(function(e){return e.id!==t.id})},Open:function(s){e.filter(function(e){return e.id===s})[0].open()},Close:function(s){e.filter(function(e){return e.id===s})[0].close()}}}),app.directive("ngEnter",function(){return function(e,s,t){s.bind("keydown keypress",function(s){13===s.which&&(e.$apply(function(){e.$eval(t.ngEnter)}),s.preventDefault())})}}),app.service("MyService",["$http",function(e){var s=this;this.config={},this.getData=function(s){return e.get(s)},this.getConfig=function(){return new Promise(function(e,t){0!==Object.keys(s.config).length?e(s.config):(console.log("Testing the values of config.json file, if it completes process will continue automatically"),s.getData("./config.json").then(function(n){s.getData(n.data.api_url+"search/issues?q="+n.data.repo_name+"&page=1&per_page=1").then(function(o){console.log("The results might be wrong if you provided wrong value in repo_name, cause Githup API can give results even if you provide wrong repo name"),s.getData(n.data.api_url+"repos/"+n.data.repo_name+"/issues?page=1&per_page=1").then(function(o){s.config=n.data,s.config!=={}?e(s.config):t()},function(e){console.log("You provided wrong value in repo_url"),console.log(e),alert("If data is not being fetched please check in the console for more details")})},function(e){console.log(e),alert("If data is not being fetched please check in the console for more details")})},function(e){console.log("You don't have config file."),console.log(e),alert("You don't have config file. Check in the console for more details")}))})},this.postData=function(s,t){return e.post(s,t)},this.invertColor=function(e){return{color:tinycolor.mostReadable(tinycolor(e),Object.keys(tinycolor.names)).toHexString()}}}]),app.controller("PostIssueCtrl",["$scope","MyService","$location",function(e,s,t){e.init=function(){s.getConfig().then(function(s){e.config=s})},e.fn={},e.fn.postIssue=function(n){"Enter your acccesstoken here"===e.config.access_token?(console.log("Enter a valid access token in the config.json for posting a issue"),console.log("Generate the personal access token from ",e.config.access_token_link)):(e.createdIssue=!1,n.labels=n.labels?n.labels.replace(/\s/g,"").split(","):[],s.postData(e.config.api_url+"repos/"+e.config.repo_name+"/issues?access_token="+e.config.access_token,n).then(function(s){console.log(s),e.createdIssue=!0}).then(function(){e.postIssue={},t.url("/")}))}}]),app.controller("IssuesCtrl",["$scope","MyService","$http","$location","ModalService","$timeout",function(e,s,t,n,o,i){e.go=function(e){n.path(e)};var a=this;a.openModal=function(e){o.Open(e)},a.closeModal=function(e){o.Close(e)},a.bodyText="This text can be updated in modal 1",e.data={},e.CreateIssue=!1,e.viewCreateIssue=function(s){e.CreateIssue=s},e.list={labels:[],milestones:[]},e.issues={page:1,labels:"",issue_state:"open"},e.show="issues",e.dataMessage="",e.init=function(){s.getConfig().then(function(s){e.config=s,console.log(e.config),e.issues.filterIssues("open")})},e.init(),e.invertColor=function(e){return s.invertColor(e)},e.setShowData=function(s){s.length?e.showData=s:(e.dataMessage="No Results found, Search for another query. Clearing the query in 2sec....",i(function(){e.issues.filterIssues("open")},2e3))},e.issues.filterpullrequest=function(e){var s=[];return e.forEach(function(e){e.hasOwnProperty("pull_request")||s.push(e)}),s},e.issues.getComments=function(t){var n=e.config.api_url+"repos/"+e.config.repo_name+"/issues/"+t+"/comments";s.getData(n).then(function(e){console.log(e)})},e.locationChange=function(e){window.location.href=e},e.issues.nextIssues=function(t){a.openModal("custom-modal-1");var n="",o="";t?++e.issues.page:!1===t&&e.issues.page>1&&--e.issues.page,"filter"===e.issues.searchOption?(n=e.issues.label?"repo:"+e.config.repo_name+"+label:"+e.issues.label:"repo:"+e.config.repo_name+"+"+e.issues.filters.replace("state:all","state:open state:closed").replace(/\s/g,"+"),o=e.config.api_url+"search/issues?q="+n+"&page="+e.issues.page+"&per_page="+e.config.per_page):o=e.config.api_url+"repos/"+e.config.repo_name+"/issues?state="+e.issues.issue_state+"&page="+e.issues.page+"&per_page="+e.config.per_page,s.getData(o).then(function(s){"filter"===e.issues.searchOption?e.setShowData(e.issues.filterpullrequest(s.data.items)):e.setShowData(e.issues.filterpullrequest(s.data))},function(s){-1===s.status?console.log("Check your Internet Connection"):404===s.status?console.log("Check you repository and username"):422===s.status&&e.setShowData([]),console.log(s.data)}).then(function(){a.closeModal("custom-modal-1")})},e.issues.filterIssues=function(s){e.dataMessage="",e.CreateIssue=!1,e.issues.filters="",e.issues.page=1,e.clearData(),e.issues.issue_state=s,e.issues.nextIssues()},e.issues.filterResults=function(){e.clearData(),e.issues.searchOption="filter",e.dataMessage="",e.issues.nextIssues()},e.issues.addToFilter=function(s){e.issues.filters+=" "+s},e.issues.getIssuesByLabel=function(s){e.clearData(),e.issues.searchOption="filter",e.issues.label=s,e.issues.nextIssues()},e.clearData=function(){e.show="issues",e.issues.searchOption="",e.issues.issue_state="",e.issues.label=""},e.getAllLabels=function(){e.show="labels",e.dataMessage="",e.showData=[],url=e.config.api_url+"repos/"+e.config.repo_name+"/labels",e.getLabels(url).then(function(s){e.setShowData(s.data)}).then(function(){})},e.getLabels=function(){return s.getData(e.config.api_url+"repos/"+e.config.repo_name+"/labels")},e.getLabelsInList=function(){e.list.labels&&0===e.list.labels.length&&e.getLabels().then(function(s){e.list.labels=s.data}).then(function(){})},e.getMilestones=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"open";e.dataMessage="",e.show="milestones",e.showData=[],url=e.config.api_url+"repos/"+e.config.repo_name+"/milestones?state="+t,s.getData(url).then(function(s){e.setShowData(s.data)}).then(function(){})},e.getMilestonesInList=function(){e.list.milestones&&0===e.list.milestones.length&&s.getData(e.config.api_url+"repos/"+e.config.repo_name+"/milestones").then(function(s){e.list.milestones=s.data}).then(function(){})}}]);